{"version":3,"sources":["auth/AuthContext.js","types/types.js","auth/authReducer.js","components/login/LoginScreen.js","components/ui/Navbar.js","data/heroes.js","components/heroes/HeroCard.js","components/heroes/HeroList.js","selectors/getHeroesByPublisher.js","components/marvel/MarvelScreen.js","components/heroes/HeroScreen.js","selectors/getHeroById.js","components/dc/DcScreen.js","components/search/SearchScreen.js","hooks/useForm.js","selectors/getHeroesByName.js","routers/DashboardRoutes.js","routers/PrivateRoute.js","routers/PublicRoute.js","routers/AppRouter.js","HeroesApp.js","index.js"],"names":["AuthContext","createContext","types","authReducer","state","action","type","payload","logged","LoginScreen","history","dispatch","useContext","className","class","onClick","lastPath","localStorage","getItem","name","push","Navbar","user","useHistory","to","activeClassName","exact","replace","heroes","HeroCard","id","superhero","alter_ego","first_appearance","characters","style","maxWidth","src","alt","HeroList","publisher","useMemo","includes","Error","filter","hero","getHeroesByPublisher","map","MarvelScreen","HeroScreen","heroId","useParams","find","length","goBack","DcScreen","SearchScreen","location","useLocation","queryString","parse","search","q","initialState","useState","values","setValues","target","value","useForm","searchText","formValues","handleInputChange","heroesFiltered","toLocaleLowerCase","getHeroesByName","onSubmit","e","preventDefault","placeholder","autoComplete","onChange","DashboardRoutes","path","component","PrivateRoute","isAuthenticated","Component","rest","setItem","pathname","props","PublicRoute","AppRouter","init","JSON","HeroesApp","useReducer","useEffect","stringify","Provider","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.988a2f71.chunk.js","sourcesContent":["import { createContext } from \"react\";\r\n\r\nexport const AuthContext = createContext();\r\n\r\n\r\n\r\n/*\r\n-Es un higher order component es por eso que se pone la \"A\" mayúscula.\r\n-Es un higher order component, que establecera, compartira al reducer \"authReducer\" a lo largo de toda\r\nmi aplicación.\r\n*/","\r\nexport const types = {\r\n    login: \"[auth] login\",\r\n    logout: \"[auth] logout\",\r\n};\r\n\r\n\r\n\r\n/*\r\n-Este objeto contendra todos los diferentes \"types\" de mi aplicación\r\n\r\n\r\n*/","import { types } from \"../types/types\";\r\n\r\nexport const authReducer = (state={} , action) => {\r\n\r\n    switch (action.type) {\r\n        case types.login:\r\n            return {\r\n                    ...action.payload,\r\n                    logged: true\r\n                   }\r\n        \r\n        case types.logout:\r\n            return {\r\n                    ...action.payload,\r\n                    logged:false\r\n                   }\r\n    \r\n        default:\r\n            return state;\r\n    }\r\n\r\n}\r\n\r\n\r\n/*\r\n-Un Reducer no es más que una simple función pura.\r\n-Los tipos de \"types.login\" y \"types.logout\" estan en el objeto en src>types>types.js .\r\n*/","import React, { useContext} from 'react'\r\nimport { AuthContext } from '../../auth/AuthContext'\r\nimport { types } from '../../types/types';\r\nimport \"../../index.css\";\r\n\r\n//Hacemos el destructuring del prop \"history\" que nos brinda el \"react-router-dom\"\r\nexport const LoginScreen = ({history}) => {\r\n  \r\n    const {dispatch}=useContext(AuthContext);\r\n\r\n    const handleLogin = ()=>{\r\n\r\n//Obtengo el \"lastPath\" en caso no haya que me almacene la ruta general \"/\"\r\n        const lastPath = localStorage.getItem(\"lastPath\") || '/';\r\n//Utilizamos el método push del \"history\" el cual nos redirecciona a la página pasada como argumento.S \r\n        dispatch({\r\n            type:types.login,\r\n            payload:{\r\n                name:\"loggedUserName\"\r\n            }\r\n        })\r\n//Este \"history.push(\"/\")\" tambien podría estar arriba(antes) del dispatch y TODO SEGUIRÍA funcionando\r\n//... esto ya es propio de \"react-router-dom\".\r\n        history.push(lastPath);\r\n    }\r\n    return (\r\n        <div className=\"container\">\r\n            <div class=\"login-center\">\r\n                <h1>Login Screen</h1>\r\n                <hr/>\r\n                <button className=\"btn btn-primary\" onClick={handleLogin}>\r\n                    Login\r\n                </button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n/*\r\n¿COMO HAGO PARA REDIRECCIONAR AL HACER CLICK EN EL BOTON DE \"Login\"?\r\nRTa: Podriamos hacerlo con el \"window.href\" , pero el \"react-router-dom\" que hemos instalado previamente nos da props\r\n     que podemos utilizar para redireccionarnos a otra página al hacer click en el boton \"Login\"\r\n     -Tenemos props incrustadas por defecto gracias al \"react-router-dom\" , tenemos las props tales como \"history\",\r\n      \"location\" , \"match\", nosotros utilizaremos el método push que viene en la prop \"history\" el cual nos \r\n      redireccionará a otra pantalla cuando hagamos click, para tal caso debemos poner el push adentro del método\r\n      \"handleLogin\" para que se active al momento de hacer click\r\n\r\n-Utilizo el \"history\" ya que es una prop brindada por \"react-router-dom\" tengo que desestructurarla o traerla \r\nmediante props, pero en este caso estoy desestructurando: {history}...\r\n\r\n-.... Luego dentro del evento \"handleLogin\" utilizaré el método \".push\" del history y le pasaré como argumento \r\nel path al cualquier me quiero redirigir : history.push(\"/marvel\") \r\n\r\n\r\n\r\n*/","import React, { useContext} from 'react'\r\nimport { Link, NavLink, useHistory } from 'react-router-dom'\r\nimport { AuthContext } from '../../auth/AuthContext'\r\nimport { types } from '../../types/types';\r\nimport \"../../index.css\";\r\n\r\nexport const Navbar = () => {\r\n\r\n    const {user:{name}, dispatch}=useContext(AuthContext);\r\n\r\n//Utilizo un hook de \"react-router-dom\" para obtener el \"history\"\r\n    const history = useHistory();\r\n\r\n    const handleLogout = () =>{\r\n    //Al hacer click en el boton \"logout\" me redirreciona a la página de login\r\n        history.replace(\"/login\");\r\n    //Luego hago un \"dispatch\" con el tipo \"logout\"\r\n        dispatch({\r\n            type: types.logout\r\n        })\r\n    }\r\n    \r\n    return (\r\n        <nav className=\"navbar navbar-expand-sm navbar-dark bg-dark\">\r\n           <div class=\"container nav-bar\">\r\n               \r\n               <Link\r\n                   className=\"navbar-brand\"\r\n                   to=\"/\"\r\n               >\r\n                   SuperHeroes\r\n               </Link>\r\n               <div className=\"navbar-collapse\">\r\n                   <div className=\"navbar-nav\">\r\n                       <NavLink\r\n                           activeClassName=\"active\"\r\n                           className=\"nav-item nav-link\"\r\n                           exact\r\n                           to=\"/marvel\"\r\n                       >\r\n                           Marvel\r\n                       </NavLink>\r\n                       <NavLink\r\n                           activeClassName=\"active\"\r\n                           className=\"nav-item nav-link\"\r\n                           exact\r\n                           to=\"/dc\"\r\n                       >\r\n                           DC\r\n                       </NavLink>\r\n                       <NavLink\r\n                           activeClassName=\"active\"\r\n                           className=\"nav-item nav-link\"\r\n                           exact\r\n                           to=\"/search\"\r\n                       >\r\n                           Search\r\n                       </NavLink>\r\n                   </div>\r\n               </div>\r\n               <div className=\"navbar-collapse collapse w-100 order-3 dual-collapse2 logout-nav\">\r\n                   <ul className=\"navbar-nav ml-auto\">\r\n                       <span className=\"nav-item nav-link text-info\">\r\n                           {name}\r\n                       </span>\r\n                       <button\r\n                           className=\"nav-item nav-link btn\"\r\n                           onClick={handleLogout}\r\n                       >\r\n                           Logout\r\n                       </button>\r\n                   </ul>\r\n               </div>\r\n           </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\n/*\r\n-El \"Logout\" antes era un \"NavLink\" ahora lo cambie a un \"button\" y le agregue el evento \"handleLogout\" el cual al hacer\r\nclick en este botón me redirecciona a la página del \"login\" y hace un \"dispatch\" con el tipo \"logout\".\r\n\r\nPARA PODER REDIRECCIONARME A LA PÁGINA DE \"/login\" lo puedo hacer con \"history.replace(\"/login\")\", pero NO PUEDO TRAER\r\nEL \"history\" mediante parámetros como lo hice anteriormente, en este caso con NavBar no esta dentro de las rutas no \r\npuedo obtener el \"history\" mediante parámetro, PERO SI PUEDO obtenerlo usando el hook \"useHistory()\" de \"react-router-dom\".\r\n\r\n\r\n*/","export const heroes = [\r\n    {\r\n        'id': 'dc-batman',\r\n        'superhero':'Batman', \r\n        'publisher':'DC Comics', \r\n        'alter_ego':'Bruce Wayne',\r\n        'first_appearance':'Detective Comics #27',\r\n        'characters':'Bruce Wayne'\r\n    },\r\n    {\r\n        'id': 'dc-superman',\r\n        'superhero':'Superman', \r\n        'publisher':'DC Comics', \r\n        'alter_ego':'Kal-El',\r\n        'first_appearance':'Action Comics #1',\r\n        'characters':'Kal-El'\r\n    },\r\n    {\r\n        'id': 'dc-flash',\r\n        'superhero':'Flash', \r\n        'publisher':'DC Comics', \r\n        'alter_ego':'Jay Garrick',\r\n        'first_appearance':'Flash Comics #1',\r\n        'characters':'Jay Garrick, Barry Allen, Wally West, Bart Allen'\r\n    },\r\n    {\r\n        'id': 'dc-green',\r\n        'superhero':'Green Lantern', \r\n        'publisher':'DC Comics', \r\n        'alter_ego':'Alan Scott',\r\n        'first_appearance':'All-American Comics #16',\r\n        'characters':'Alan Scott, Hal Jordan, Guy Gardner, John Stewart, Kyle Raynor, Jade, Sinestro, Simon Baz'\r\n    },\r\n    {\r\n        'id': 'dc-arrow',\r\n        'superhero':'Green Arrow', \r\n        'publisher':'DC Comics', \r\n        'alter_ego':'Oliver Queen',\r\n        'first_appearance':'More Fun Comics #73',\r\n        'characters':'Oliver Queen'\r\n    },\r\n    {\r\n        'id': 'dc-wonder',\r\n        'superhero':'Wonder Woman', \r\n        'publisher':'DC Comics', \r\n        'alter_ego':'Princess Diana',\r\n        'first_appearance':'All Star Comics #8',\r\n        'characters':'Princess Diana'\r\n    },\r\n    {\r\n        'id': 'dc-martian',\r\n        'superhero':'Martian Manhunter', \r\n        'publisher':'DC Comics', \r\n        'alter_ego':'J\\'onn J\\'onzz',\r\n        'first_appearance':'Detective Comics #225',\r\n        'characters':'Martian Manhunter'\r\n    },\r\n    {\r\n        'id': 'dc-robin',\r\n        'superhero':'Robin/Nightwing', \r\n        'publisher':'DC Comics', \r\n        'alter_ego':'Dick Grayson',\r\n        'first_appearance':'Detective Comics #38',\r\n        'characters':'Dick Grayson'\r\n    },\r\n    {\r\n        'id': 'dc-blue',\r\n        'superhero':'Blue Beetle', \r\n        'publisher':'DC Comics', \r\n        'alter_ego':'Dan Garret',\r\n        'first_appearance':'Mystery Men Comics #1',\r\n        'characters':'Dan Garret, Ted Kord, Jaime Reyes'\r\n    },\r\n    {\r\n        'id': 'dc-black',\r\n        'superhero':'Black Canary', \r\n        'publisher':'DC Comics', \r\n        'alter_ego':'Dinah Drake',\r\n        'first_appearance':'Flash Comics #86',\r\n        'characters':'Dinah Drake, Dinah Lance'\r\n    },\r\n    {\r\n        'id': 'marvel-spider',\r\n        'superhero':'Spider Man', \r\n        'publisher':'Marvel Comics', \r\n        'alter_ego':'Peter Parker',\r\n        'first_appearance':'Amazing Fantasy #15',\r\n        'characters':'Peter Parker'\r\n    },\r\n    {\r\n        'id': 'marvel-captain',\r\n        'superhero':'Captain America', \r\n        'publisher':'Marvel Comics', \r\n        'alter_ego':'Steve Rogers',\r\n        'first_appearance':'Captain America Comics #1',\r\n        'characters':'Steve Rogers'\r\n    },\r\n    {\r\n        'id': 'marvel-iron',\r\n        'superhero':'Iron Man', \r\n        'publisher':'Marvel Comics', \r\n        'alter_ego':'Tony Stark',\r\n        'first_appearance':'Tales of Suspense #39',\r\n        'characters':'Tony Stark'\r\n    },\r\n    {\r\n        'id': 'marvel-thor',\r\n        'superhero':'Thor', \r\n        'publisher':'Marvel Comics', \r\n        'alter_ego':'Thor Odinson',\r\n        'first_appearance':'Journey into Myster #83',\r\n        'characters':'Thor Odinson'\r\n    },\r\n    {\r\n        'id': 'marvel-hulk',\r\n        'superhero':'Hulk', \r\n        'publisher':'Marvel Comics', \r\n        'alter_ego':'Bruce Banner',\r\n        'first_appearance':'The Incredible Hulk #1',\r\n        'characters':'Bruce Banner'\r\n    },\r\n    {\r\n        'id': 'marvel-wolverine',\r\n        'superhero':'Wolverine', \r\n        'publisher':'Marvel Comics', \r\n        'alter_ego':'James Howlett',\r\n        'first_appearance':'The Incredible Hulk #180',\r\n        'characters':'James Howlett'\r\n    },\r\n    {\r\n        'id': 'marvel-daredevil',\r\n        'superhero':'Daredevil', \r\n        'publisher':'Marvel Comics', \r\n        'alter_ego':'Matthew Michael Murdock',\r\n        'first_appearance':'Daredevil #1',\r\n        'characters':'Matthew Michael Murdock'\r\n    },\r\n    {\r\n        'id': 'marvel-hawkeye',\r\n        'superhero':'Hawkeye', \r\n        'publisher':'Marvel Comics', \r\n        'alter_ego':'Clinton Francis Barton',\r\n        'first_appearance':'Tales of Suspense #57',\r\n        'characters':'Clinton Francis Barton'\r\n    },\r\n    {\r\n        'id': 'marvel-cyclops',\r\n        'superhero':'Cyclops', \r\n        'publisher':'Marvel Comics', \r\n        'alter_ego':'Scott Summers',\r\n        'first_appearance':'X-Men #1',\r\n        'characters':'Scott Summers'\r\n    },\r\n    {\r\n        'id': 'marvel-silver',\r\n        'superhero':'Silver Surfer', \r\n        'publisher':'Marvel Comics', \r\n        'alter_ego':'Norrin Radd',\r\n        'first_appearance':'The Fantastic Four #48',\r\n        'characters':'Norrin Radd'\r\n    }\r\n]\r\n\r\n/*\r\n-El listado de heroes.\r\n-Aca utilizaremos data ficticia, luego haremos nuestro propio endpoint, o sea nuestro propio backend\r\n-Tendre dos tipos de publisher: -Marvel Comics\r\n                                -DC Comics\r\n                                ...Estos seran mi data\r\n*/","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\n\r\nexport const HeroCard = ({\r\n    id,\r\n    superhero,\r\n    alter_ego,\r\n    first_appearance,\r\n    characters,\r\n}) => {\r\n    return (\r\n        <div className=\"card ms-3\" style={{maxWidth:540}}>\r\n            <div className=\"row no-gutters\">\r\n                <div className=\"col-md-4\">\r\n                    <img src={`./assets/heroes/${id}.jpg`} className=\"card-img \" alt={superhero} />\r\n                </div>\r\n\r\n                <div className=\"col-md-8\">\r\n\r\n                    <div className=\"card-body\">\r\n                        <h5 className=\"card-title\">{superhero}</h5>\r\n                        <p className=\"card-text \">{alter_ego}</p>\r\n\r\n                        {\r\n                            (alter_ego !== characters)\r\n                                && <p className=\"card-text\">{characters}</p>\r\n                        }\r\n                        <p className=\"card-text\">\r\n                            <small className=\"text-muted\">{first_appearance}</small>\r\n                        </p>\r\n\r\n                        <Link to={`./hero/${id}`}>\r\n                            Más...\r\n                        </Link>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            {superhero}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n/*\r\n\r\n-Estas serán las tarjetas de los heroes que mostraremos tendrán una imagen y su descripción., estas se envian al componente\r\n\"HeroList\".\r\n-No tendremos un warning en la consola porque no tenemos variables, sino que son props que no siempren las vamos a utilizar.\r\n-Creamos un botón, el cuál es un enlace que tendra de nombre \"Más...\" y al hacer click en este nos llevará a una página que\r\nnos muestre más información acerca de ese heroe.\r\n\r\n*/","import React, { useMemo } from 'react'\r\nimport { getHeroesByPublisher } from '../../selectors/getHeroesByPublisher'\r\nimport { HeroCard } from './HeroCard';\r\n\r\n//Aca recibo el \"publisher\"\r\nexport const HeroList = ({publisher}) => {\r\n\r\n    const heroes = useMemo(() => getHeroesByPublisher(publisher), [publisher]);\r\n    //Alamacenare los heroes filtrados por el \"publisher\" que envio desde este Componente a \"getHeroesByPublisher\"\r\n    // const heroes = getHeroesByPublisher(publisher);\r\n\r\n    return (\r\n        <div className=\"card-columns animate__animated animate__fadeIn\">\r\n            {\r\n                heroes.map( hero => (\r\n                    <HeroCard \r\n                        key={hero.id} \r\n                        {...hero} \r\n                    />\r\n                ))\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n/*\r\nEn este componente mostraré el listado de heroes.\r\n-Aca recibiré mi publisher: -DC Comics\r\n                            -Marvel Comics\r\n\r\n-La expresión de Javascript va entre llaves \"{...}\"\r\n-Este componente listará los heroes que estan en mi \"base de datos ficticia llamada \"data\" \" según el\r\nvalor del publisher que se pase y este se pasará desde cada componente en el cual se use este componente\r\n\"HeroList\", este componente solo se encargará de hacer el listado y recorrer segun el valor pasado.\r\n\r\n-Notar que el parámetro que recibe se llama \"publisher\" tal cual se debe llamar el prop que le paso\r\nsi es que lo utilizo desde otro componente.\r\n\r\n-Teniamos todo adentro de un \"<ul></ul>\" ahora lo cambiamos por un \"div\" y le dimos la clase className=\"card-columns\"\r\n\r\n-Al \"HeroCard\" le mando todas las props del \"hero\" mediante el spread operator: {...hero}   <--Asi le enviaría TODOS SUS props\r\n\r\n-Utilizamos \"useMemo\" para recordar la funcion getHeroByPublisher y que no se este ejecutando en todo momento, que SOLO\r\nSE VUELVA A EJECUTAR CUANDO CAMBIE \"publisher\", sino NO .\r\n\r\n-Le agregamos animaciones de animate.css mediante cdn\r\n\r\n*/\r\n","import { heroes } from \"../data/heroes\";\r\n\r\nexport const getHeroesByPublisher = (publisher) =>{\r\n\r\n/*\r\nHacemos una buena práctica que si el usuario me escribe un \"publisher\" que no es aceptado o no es válido\r\nentonces voy a lanzar un error:\r\n*/\r\nconst validPublishers = [\"DC Comics\",\"Marvel Comics\"]; //Con este arreglo valido.\r\n//Validamos\r\n    if(!validPublishers.includes(publisher)){\r\n        throw new Error(`Publisher \" ${publisher} \" no es correcto`);\r\n    }\r\n\r\n    //Voy a filtrar el arreglo con el \"publisher\"\r\n    return heroes.filter(hero=>hero.publisher===publisher);\r\n    \r\n}\r\n\r\n/*\r\n-Este será el mád dificil\r\n\r\n-En la validación: \"!validPublishers.includes(publisher)\" esto significa que si NO encuentra el \"publisher\" enviado, entonces\r\nque me lanze el error. O sea si el publisher enviado NO COINCIDE con alguno de los elementos del \"validPublishers\", entonces\r\nque me lanze el error.\r\n*/","import React from 'react'\r\nimport { HeroList } from '../heroes/HeroList'\r\n\r\nexport const MarvelScreen = () => {\r\n    return (\r\n        <div>\r\n            <h1>Marvel Screen</h1>\r\n            <hr/>\r\n            <HeroList publisher=\"Marvel Comics\"/>\r\n        </div>\r\n    )\r\n}\r\n\r\n/*\r\n-Mediante el componente \"HeroList\" mostramos el listado de los heroes de Marvel Comics en este caso, \r\nNOTAR que el prop que le paso se llama \"publisher\" tal cual el nombre del parámetro que recibe mi\r\ncomponente \"HeroList\", los NOMBRES DEL PROP(aca) COMO DEL PARÁMETRO DESESTRUCTURADO EN EL FUNCTIONAL \r\nCOMPONENT \"HeroList\" ({publisher}) DEBEN LLAMARSE IGUAL !\r\n\r\n*/","import React, { useMemo } from 'react'\r\nimport { useParams, Redirect } from 'react-router-dom'\r\nimport { getHeroById } from '../../selectors/getHeroById';\r\nimport \"../../index.css\";\r\nexport const HeroScreen = ({history}) => {\r\n\r\n/* Es \"heroId\" porque en el path del Route en DashboardRoutes escribí path=\"/hero/:heroId\" y es por eso\r\n   que tengo que desestructurarlo con el nombre de \"heroId\" ya que al ser un objeto TIENE QUE TENER el mismo\r\n   nombre que le di en el objeto, en este caso en el \"path\". Verificar en ir a la consola>HeroScreen>params>\r\n*/\r\n    const {heroId} = useParams();\r\n\r\n    const hero = useMemo(() => getHeroById(heroId), [heroId]);\r\n/*Mando a llavar el heroe según el \"heroId\" del heroe obtenido anteriomente desde la \"url\" y almaceno la respuesta en \"hero\", \r\nla respuesta será un objeto. */\r\n    //const hero = getHeroById(heroId);\r\n\r\n    /*Verifico que haya un hero (!hero = no hay hero) en caso el heroId no exista, o sea se haya enviado \r\n    un url no valido, entonces lo Redirecciono a la página de Marvel con el \"Redirect\"*/\r\n    if(!hero){\r\n        return <Redirect to=\"/\" />;\r\n    }\r\n\r\n    const handleReturn = ()=>{\r\n        \r\n        if(history.length <=2){\r\n            history.push('/');\r\n        }else{\r\n            history.goBack();\r\n        }\r\n    }\r\n\r\n   const {\r\n       superhero,\r\n       publisher,\r\n       alter_ego,\r\n       first_appearance,\r\n       characters\r\n   } = hero;\r\n\r\n    return (\r\n        <div className=\"row mt-5\">\r\n            <div className=\"col-4\">\r\n                <img\r\n                    src={`../assets/heroes/${heroId}.jpg`}\r\n                    alt={superhero}\r\n                    className=\"img-thumbnail animate__animated animate__fadeInLeft\"\r\n                />\r\n            </div>\r\n\r\n            <div className=\"col-8\">\r\n                <h3>{superhero}</h3>\r\n                <ul className=\"list-group list-group-flush\">\r\n                    <li className=\"list-group-item\"><b>Alter ego: </b>{alter_ego}</li>\r\n                    <li className=\"list-group-item\"><b>Publisher: </b>{publisher}</li>\r\n                    <li className=\"list-group-item\"><b>First appearance: </b>{first_appearance}</li>\r\n                </ul>\r\n\r\n                <h5 className=\"white-text\">Characters</h5>\r\n                <p className=\"white-text\">{characters}</p>\r\n\r\n                <button\r\n                    className=\"btn btn-outline-info\"\r\n                    onClick={handleReturn}\r\n                >\r\n                    Return\r\n                </button>\r\n           </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n/*\r\n-Utilizaremos el hook \"useMemo\" de React para recordar cuando se utiliza la función y no se cargue en todo momento, sino\r\nque SOLO SE VUELVA A EJECUTAR LA FUNCION getHeroById cuando cambien el \"heroId\", sino que NO SE EJECUTE, mientras no cambie.\r\n\r\n--Le agregamos animaciones de animate.css mediante cdn.\r\n\r\n*/","import { heroes } from \"../data/heroes\"\r\n\r\nexport const getHeroById = (id) => {\r\n    \r\n    //Voy a filtrar el arreglo según el id enviado:\r\n    return heroes.find( hero => hero.id===id);\r\n    \r\n}\r\n\r\n/*\r\n-Con el método \"find\" apenas encuentre uno(1) eso sería todo, o sea apenas encuentre ese heroe que coincida con el id\r\nlo retornaría y eso sería todo.\r\n\r\n\r\n*/\r\n","import React from 'react'\r\nimport { HeroList } from '../heroes/HeroList'\r\n\r\nexport const DcScreen = () => {\r\n    return (\r\n        <div>\r\n            <h1>DC Screen</h1>\r\n            <hr/>\r\n            <HeroList publisher=\"DC Comics\" />\r\n        </div>\r\n    )\r\n}\r\n\r\n/*\r\n-Mediante el componente \"HeroList\" mostramos el listado de los heroes de DC Comics en este caso.\r\n*/","import React, { useMemo } from 'react';\r\nimport queryString from \"query-string\";\r\nimport { useLocation } from 'react-router-dom';\r\nimport { useForm } from '../../hooks/useForm';\r\nimport { HeroCard } from '../heroes/HeroCard';\r\nimport { getHeroesByName } from '../../selectors/getHeroesByName';\r\n\r\nexport const SearchScreen = ({history}) => {\r\n     const location = useLocation();\r\n//En caso sea undefined le establezco que \"q\" sea un string vacío.\r\n    const {q = \"\"} = queryString.parse(location.search);\r\n\r\n    const [formValues, handleInputChange] = useForm({\r\n//Aunque refresque el navegador, la url tendrá aun el queryString y en el input se mantendrá el valor buscado gracias a lo siguiente:\r\n        searchText: q\r\n    });\r\n    const {searchText} = formValues;\r\n    const heroesFiltered = useMemo(() => getHeroesByName(q), [q]);\r\n\r\n    const handleSearch = (e)=>{\r\n        e.preventDefault();\r\n        //Establezco el query, puede ser \"?q=\" o \"?query=\" .\r\n        history.push(`?q=${searchText}`);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>Search Screen</h1>\r\n            <hr/>\r\n\r\n            <div className=\"row\">\r\n                <div className=\"col-5\">\r\n                    <h4>Search Form</h4>\r\n                    <hr/>\r\n\r\n                    <form onSubmit={handleSearch}>\r\n                        <input\r\n                            type=\"text\"\r\n                            placeholder=\"Find your hero\"\r\n                            className=\"form-control\"\r\n                            name=\"searchText\"\r\n                            autoComplete=\"off\"\r\n                            value={searchText}\r\n                            onChange={handleInputChange}\r\n                        />\r\n\r\n                        <button \r\n                            type=\"submit\"\r\n                            className=\"btn m-1 btn-block btn-outline-primary\"\r\n                            \r\n                        >\r\n                            Search...\r\n                        </button>\r\n\r\n                    </form>\r\n                </div>\r\n\r\n                <div className=\"col-7\">\r\n                    <h4>Results</h4>\r\n                    <hr/>\r\n\r\n                    {\r\n                        (q===\"\") \r\n                            &&\r\n                            <div className=\"alert alert-info\">\r\n                                Search a hero\r\n                            </div>\r\n                    }\r\n\r\n                    {\r\n                        (q!==\"\" && heroesFiltered.length===0)\r\n                            &&\r\n                            <div className=\"alert alert-danger\">\r\n                                There is no a hero with {q}\r\n                            </div>\r\n                \r\n                    }\r\n\r\n                    {\r\n                        heroesFiltered.map(hero=>(\r\n                            <HeroCard\r\n                                key={hero.id}\r\n                                {...hero}\r\n                            />\r\n                        ))\r\n                    }\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n/*\r\n-Al pasarle {...hero} al \"HeroCard\" le estoy pasando todas sus propiedades.\r\n\r\n-Cuando el \"url\" cambie quiero usar un \"QueryString\" para poder obtener ese \"Query\" para poder aplicar el \"Query\" en\r\n\"SearchScreen.js\" esto me mantendrá la historia, para esto utilizaremos:\r\n                                                                         - {history} : recibido como parámetro en la función\r\n                                                                         - history.push(`?q=${searchText}`) : Este pondra en la url el\r\n                                                                         enlace detallado en el argumento del \"push\" al momento de dar\r\n                                                                         el submit del formulario, ya que este se encuentra adentro de\r\n                                                                         \"handleSubmit\".\r\n\r\n-Para poder leer el \"Query\" utilizo las props de \"react-router-dom\": -Puedo importar el \"location\" en los parámetros tal como lo hice \r\n                                                                     con \"history\", pero en vez de eso utilizaré el \"hook\" de \"react-router-dom\"\r\n                                                                     para obtener la \"location\": const location = useLocation();\r\n                                                                     -Instalaremos el \"query-string\" de npm, este nos ayudará a obtener el\r\n                                                                     query de nuestra \"url\".Más info en: https://www.npmjs.com/package/query-string\r\n\r\n*/","import { useState } from \"react\";\r\n\r\n//Al parámetro initialState le doy un arreglo vacío por default en caso el usuario no me pase nada(Así NO \"revienta\" mi aplicación)\r\nexport const useForm = (initialState = {}) => {\r\n  const [values, setValues] = useState(initialState);\r\n\r\n  //Con esta función borramos/reseteamos el input\r\n  const reset = () => {\r\n    setValues(initialState);\r\n  };\r\n  //Haremos por separado al evento de la función, y no retonaremos todo en uno como en \"OTRA FORMA\"\r\n  const handleInputChange = ({ target }) => {\r\n    setValues({\r\n      ...values,\r\n      [target.name]: target.value,\r\n    });\r\n  };\r\n\r\n  /*OTRA FORMA PARA RETORNAR TODO EN UNO:\r\n  return [values, ({target})=>{\r\n      setValues({\r\n          ...values,\r\n          [target.name]: target.value\r\n      });\r\n  }];\r\n  */\r\n\r\n  return [values, handleInputChange, reset];\r\n};\r\n\r\n/*OBSERVACIÓN:\r\n-Es un Custom Hook que se encargará de manejar los formularios\r\n-Este es el custom hook para los formularios , o sea para código que se repite y que se\r\nusará en varios formularios\r\n*/","import {heroes} from \"../data/heroes\";\r\n\r\nexport const getHeroesByName = (name = \"\") => {\r\n\r\n//Si no escribio nada puede que este en la pantalla de inicio y NO quiero regresar nada.\r\n    if(name===\"\"){\r\n        return [];\r\n    }\r\n\r\n    //Pasamos a minuscula lo que recibimos mediante el parámetro.\r\n    name = name.toLocaleLowerCase();\r\n    //Y cuando name ya tenga un valor, entonces aplico el filtro:\r\n    return heroes.filter(hero=>hero.superhero.toLocaleLowerCase().includes(name));\r\n}\r\n","import React from 'react'\r\nimport { Navbar } from '../components/ui/Navbar';\r\nimport { Redirect, Route, Switch } from 'react-router-dom';\r\nimport { MarvelScreen } from '../components/marvel/MarvelScreen';\r\nimport { HeroScreen } from '../components/heroes/HeroScreen';\r\nimport { DcScreen } from '../components/dc/DcScreen';\r\nimport { SearchScreen } from '../components/search/SearchScreen';\r\n\r\n//Este contiene a TODAS LAS RUTAS HIJAS, como no es sistema de rutas principal NO TIENE EL \"<Router>...</Router>\"\r\n//....Solo el \"<Switch>...</Switch>\"\r\nexport const DashboardRoutes = () => {\r\n    return (\r\n        <>\r\n            <Navbar/>\r\n            <div className=\"container mt-2\">\r\n                <Switch>\r\n                    <Route exact path=\"/marvel\" component={MarvelScreen} />\r\n                    <Route exact path=\"/hero/:heroId\" component={HeroScreen}/> \r\n                    <Route exact path=\"/dc\" component={DcScreen}/>\r\n                    <Route exact path=\"/search\" component={SearchScreen}/>\r\n\r\n                    <Redirect to=\"/marvel\"/>\r\n                </Switch>\r\n            </div>\r\n            \r\n        </>\r\n    )\r\n}\r\n\r\n\r\n\r\n/*\r\n\r\n-La diference con el sistema de rutas principal \"AppRouter\" es que esta tiene al \"<Router>...</Router>\", mientras que \r\n esta \"DashboardRoutes.js\" NO tiene \"Router\" solo tiene \"switch\"\r\n\r\n -Este componente \"DashboardRoutes\" contendrá a las rutas hijas, solamente tendrá el \"<switch></switch>\" para poder\r\n mostrar un componente (página) en base a una condición.\r\n \r\n -De esta manera podemos tener cualquier cantidad de rutas adicionales en nuestra aplicación, estas rutas adicionales\r\n deben estar en un componente como este que NO ES EL PRINCIPAL, EL PRINCIPAL ES \"AppRouter.js\".\r\n\r\n -Notar como es el path de \"HeroScreen\" , path=\"hero/:heroeId\", este \"Route\" se activará cuando haga\r\n click en el enlace \"Más...\" del card del heroe.\r\n*/","import React from 'react'\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport {Route, Redirect} from \"react-router-dom\";\r\n\r\nexport const PrivateRoute = ({\r\n    isAuthenticated,\r\n    component: Component,\r\n    ...rest\r\n}) => {\r\n\r\n//Asi almaceno el último \"pathname\" que visite (Para recordar la última página visitada) lo obtengo\r\n//...del operador \"rest\".\r\n    localStorage.setItem(\"lastPath\", rest.location.pathname)\r\n    return (\r\n        <Route {...rest}\r\n            component={(props) => (\r\n                (isAuthenticated) ?\r\n                    (<Component {...props}/>)\r\n                    :(<Redirect to=\"/login\" />)\r\n            )}\r\n        />\r\n    )\r\n}\r\n\r\nPrivateRoute.propTypes = {\r\n    isAuthenticated: PropTypes.bool.isRequired,\r\n    component: PropTypes.func.isRequired\r\n}\r\n/*\r\n-No es más que un \"Functional component\" común y corriente.\r\n*/","import React from 'react'\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport {Route, Redirect} from \"react-router-dom\";\r\n\r\nexport const PublicRoute = ({\r\n    isAuthenticated,\r\n    component: Component,\r\n    ...rest\r\n}) => {\r\n    return (\r\n        <Route {...rest}\r\n            component={(props) => (\r\n                (!isAuthenticated) ?\r\n                    (<Component {...props}/>)\r\n                    :(<Redirect to=\"/\" />)\r\n            )}\r\n        />\r\n    )\r\n}\r\n\r\nPublicRoute.propTypes = {\r\n    isAuthenticated: PropTypes.bool.isRequired,\r\n    component: PropTypes.func.isRequired\r\n}\r\n/*\r\n-No es más que un \"Functional component\" común y corriente.\r\n-Este se encargará de manejar mis rutas públicas.\r\n-Esta ruta pública no es más que la ruta privada con un cierto cambio...\r\n-Si no está autenticado \"!usAuthenticaded\" entonces mostraré el \"Component\" y si está autenticado\r\nlo redireccionaré al \"DashBoard\" \"<Redirect to... />\" .\r\n*/","import React, { useContext } from 'react';\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch\r\n  } from \"react-router-dom\";\r\nimport { AuthContext } from '../auth/AuthContext';\r\nimport { LoginScreen } from '../components/login/LoginScreen';\r\nimport { DashboardRoutes } from './DashboardRoutes';\r\nimport { PrivateRoute } from './PrivateRoute';\r\nimport { PublicRoute } from './PublicRoute';\r\n\r\n//Sistema de rutas principal de la aplicación:\r\nexport const AppRouter = () => {\r\n\r\n    const {user}=useContext(AuthContext);\r\n\r\n    return (\r\n            <Router>\r\n                <div>\r\n                    {/* A <Switch> looks through its children <Route>s and\r\n                        renders the first one that matches the current URL. */}\r\n                    <Switch>\r\n                        <PublicRoute \r\n                            exact \r\n                            path=\"/login\" \r\n                            component={LoginScreen}\r\n                            isAuthenticated={user.logged}\r\n                        />\r\n                        <PrivateRoute \r\n                            path=\"/\" \r\n                            component={DashboardRoutes}\r\n                            isAuthenticated={user.logged}\r\n                        />\r\n                    </Switch>\r\n                </div>\r\n            </Router>\r\n       \r\n    )\r\n}\r\n\r\n/*\r\n-Es un functional component común y corriente, pero su contenido es algo diferente.\r\n-Al llamarlo \"AppRouter\" por convención significaría que es el sistema de rutas principal de la aplicación.\r\n\r\n-Al ser este el sistema de rutas principales de la aplicación solo tendremos el del \"Login\" (El cual no aparecerá\r\n con el NavBar) y el componente \"Dashboardroutes\" el cual contiene a TODAS LAS RUTAS HIJAS LAS CUALES APARECERÁN \r\n CON EL NAVBAR.\r\n\r\n-Tengo que hacer privado mi Route con path=\"/\" y component={DashboardRoutes} , entonces cambio el \r\n\"Route\" por PrivateRoute (tengo que importar este componente), además tengo que usar el useContext\r\npara obtener el \"user\" y validar si está logueado o no.\r\n\r\n-Al Route del componente del \"LoginScreen\" lo cambio por \"PublicRoute\" y le tengo que pasar\r\n   isAuthenticated={user.logged}\r\n*/","import React, { useReducer,useEffect } from 'react'\r\nimport { AuthContext } from './auth/AuthContext';\r\nimport { authReducer } from './auth/authReducer';\r\nimport \"./index.css\";\r\nimport { AppRouter } from './routers/AppRouter';\r\n\r\nconst init = () => {\r\n//Si existe lo parsea y lo devuelve y SI N0 EXISTE devuelve un \"logged:false\" \r\n  return JSON.parse(localStorage.getItem(\"user\")) || {logged:false};\r\n}\r\nexport const HeroesApp = () => {\r\n\r\n  const [user, dispatch] = useReducer(authReducer, {} , init);\r\n\r\n//Para que el usuario se quede grabado\r\n  useEffect(() => {\r\n      localStorage.setItem(\"user\", JSON.stringify(user));\r\n  }, [user])\r\n\r\n    return (\r\n      <AuthContext.Provider value={{user, dispatch}}>\r\n        <AppRouter/>\r\n        </AuthContext.Provider>\r\n    )\r\n}\r\n\r\n\r\n/*\r\n-El \"reducer\" que utilizo es el \"authReducer\".\r\n-El \"initialState\" por el momento es un objeto vacío.\r\n-Siempre creo el \"init\" porque voy a leer el \"localStorage\".\r\n-Cambio el nombre del \"state\" por \"user\".\r\n-Y el \"user\" y el \"dispatch\" será lo que yo distribuya en value de mi AuthContext y tendré la habilidad\r\nde poder hacer \"dispatch\" y obtener el \"user\" a lo largo de cualquier parte de mi aplicación, porque\r\nestoy en un nivel muy alto de mi aplicación, el más alto es el \"index.js\".\r\n*/","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HeroesApp } from './HeroesApp';\n\nReactDOM.render(\n    <HeroesApp />,\n  document.getElementById('root')\n);\n\n\n/*\nDOCUMENTACIÓN DEL PROCESO DEL PROYECTO:\n\n1°) Cree el proyecto: npx create-react-app heroes-app , cree la carpeta assets adentro de public\n    en el cual guarde la carpeta con las imagenes de los personajes, de la carpeta \"src\" borre todo menos \"index.js\" y \n    cree el PRIMER componente \"HeroesApp.js\"\n\n2°) \n    a)En la terminal de este proyecto instalo: npm install react-router-dom\n    b)Más detalles en la página web : https://reactrouter.com/web/guides/quick-start\n    c)Creo la carpeta \"components\" dentro de \"src\" y dentro de components creo carpetas con sus respectivos componentes\n      dentro de las mismas, Loginscreen, MarvelScreen, etc.\n    d)Creamos la carpeta \"routers\" : src>routers>AppRouter.js , y dentro de la carpeta \"routers\" creo el componente\n      llamado \"AppRouter.js\", este nombre \"AppRouter\" por convención se le pone al sistema de rutas principal de la \n      aplicación.\n\n3°)Creo mi componente \"DashboardRoutes\" no es más que un simple functional component solo que tiene un \"<switch>...</switch>\"\n\n4°)Creo el componente \"HeroList.js\" adentro de src>components>heroes>HeroList , en este componente mostraré\n   el listado de los heroes.\n\n5°)Me crearé un par de selectores, estos selectores me ayudaran a filtrar la infomación de mi \"HeroList\" o a traer lo \n  que yo necesito en la siguiente ruta: src > selectors > \"Aca creo los siguientes selectores\"\n  a)Primer selector: \"getHeroById.js\"\n  b)Segundo selector: \"getHeroesByPublisher.js\"\n\n6°) Ahora en src>components>heroes>HeroCard.js , creo el componente \"HeroCard.js\"\n\n7°)Crearemos un componente llamado \"SearchScreen.js\" en src>components>search>SearchScreen.js y crearemos un enlace en\nel navBar para la opción \"Search\".\n\n8°)Crearé en la carpeta de selectores a un nuevo selector \"getHeroesByName.js\"\n\n---------------------------SECCIÓN 15: \"PROTECCIÓN DE RUTAS\"----------------------\n9°)Creamos dos carpetas en src : \"auth\" y \"types\"\n\n10°) Creamos \"authReducer.js\" adentro de la carpeta \"auth\".\n*/\n"],"sourceRoot":""}